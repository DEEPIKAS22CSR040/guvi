The control plane's components make global decisions about the cluster (for example, scheduling), as well as detecting and responding to cluster events (for example, starting up a new pod when a deployment's replicas field is unsatisfied).
Control plane components can be run on any machine in the cluster. Do not run user containers on this machine. 
Node Components / Worker Nodes
Node components run on every node, maintaining running pods and providing the Kubernetes runtime environment.
1. Master Node: The master node is responsible for managing the cluster and coordinating the overall state of the system. It includes the following components:

a. API Server: The API server is the central control point for all interactions with the cluster. It exposes the Kubernetes API and handles requests from users and other components.

b. Scheduler: The scheduler is responsible for assigning workloads (pods) to individual worker nodes based on resource requirements, constraints, and other policies.

c. Controller Manager: The controller manager runs various controllers that monitor the cluster state and drive it towards the desired state. Examples include the replication controller, node controller, and service controller.

d. etcd: etcd is a distributed key-value store used by Kubernetes to store cluster state and configuration data.
[20/03, 10:49 am] +91 90928 13114: 1. Pod: The basic building block of Kubernetes. A pod represents a single instance of a running process within the cluster. It can encapsulate one or more containers that share the same network and storage resources.
[20/03, 10:49 am] +91 90928 13114: 1. Create a pod using run command
$ kubectl run <pod-name> --image=<image-name> --port=<container-port>
$ kubectl run my-pod --image=nginx --port=80

2. View all the pods 
(In default namespace)
$ kubectl get pods 
(In All namespace)

$ kubectl get pods -A
# For a specific namespace
$ kubectl get pods -n kube-system

# For a specific type
$ kubectl get pods <pod-name> 
$ kubectl get pods <pod-name> -o wide
$ kubectl get pods <pod-name> -o yaml
$ kubectl get pods <pod-name> -o json

3. Describe a pod (View Pod details)
$ kubectl describe pod <pod-name>
$ kubectl describe pod my-pod
4. View Logs of a pod
$ kubectl logs <pod-name>
$ kubectl logs my-pod
[20/03, 10:49 am] +91 90928 13114: 5. Execute any command inside Pod (Inside Pod OS)
$ kubectl exec <pod-name> -- <command>
